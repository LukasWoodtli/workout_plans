1. TAG: THREE-TIMES START-UP WORKOUT I (circa 11 Minuten)


Kurz vorweg: Vergiss das regelmäßige Atmen nicht, dann hältst du länger durch, weil der Körper mit ausreichend Sauerstoff versorgt wird. Das soll kein Scherz sein. Tatsächlich vergessen Anfänger oder Wiedereinsteiger und selbst Profis bei neuen, herausfordernden Übungen zu atmen, weil sie sich auf die Ausführung der Übung konzentrieren.

ERFOLG IST EINE LAWINE, ES KOMMT NUR AUF DEN ERSTEN SCHNEEBALL AN.

Clint Eastwood



2 Minuten Rope Skipping: so gut, wie du kannst

1 Minute Push-up auf Knien: zügiges Tempo, dann 1 Minute Pause



Wiederhole Übung 1 und 2 inklusive Pause insgesamt 3-mal.





DEIN KÖRPER BRAUCHT MAGNESIUM

Du trainierst viel und die Umbaumaßnahmen des Stoffwechsels verbrauchen viel Magnesium. Um Wadenkrämpfe und Augenlidzucken zu vermeiden und vor allem um den Körper mit dem zu versorgen, was er jetzt braucht, würde ich magnesiumreiches Mineralwasser empfehlen. Generell sind alle Mineralwässer, die 180 und mehr Milligramm pro Liter Magnesium enthalten, für Sportler gut geeignet. Trinke zwei bis drei Liter am Tag. Nicht mehr, denn überschüssige Mineralstoffe werden ohnehin wieder ausgeschwemmt.





2. TAG: THREE-TIMES START-UP WORKOUT II (circa 15 Minuten)


Muskelkater? So fühlt sich Erfolg an. Nichts schmerzt schöner als positive Veränderung. Aus medizinischer Sicht spricht nichts dagegen, trotz Muskelkater zu trainieren, sofern du nicht den betreffenden Muskel trainierst. Da die Übungsauswahl bei meinem Programm ausgewogen ist, sollte das nicht der Fall sein.

1 Minute Squat: Wenn du nach 1 Minute noch Power hast, verlängere auf 1,5 Minuten.

50 x Dynamic Handplank

20 Sekunden Rope Skipping

20 Sekunden Sprint



Wiederhole das Workout insgesamt 3-mal.





Kraft versus Weiblichkeit?

Die oft bestehende Angst vor maskulinen Muskeln durch Krafttraining ist in der Regel unbegründet. Oft höre ich, dass Frauen Angst haben, Arme wie Madonna zu bekommen und nicht mehr weiblich auszusehen. Keine Angst, bevor das passiert, gibt es ein paar Vorstufen: Arme werden fest, Arme werden noch fester, haben mehr Kraft, werden schließlich athletisch und dann definiert. Bis hierher könnt ihr bedenkenlos trainieren. Der dicke Bizeps und der Madonna-Arm sind das Resultat eines wirklich harten, intensiven und mehrfachen täglichen Trainings. Die Testosteronwerte im weiblichen Körper sind zu gering, um unter normalen Umständen und mehrmaligem Training pro Woche eine außergewöhnliche Muskelmasse aufzubauen.





3. TAG: BASIC RUN I (circa 23 Minuten)


Aufgabe Nummer drei: Bleibe am Ball und halte durch, denn Phase eins ist die Aufbauphase und damit die schwierigste. Nachher geht’s viel einfacher. Meine Erfahrungen zeigen, dass Einsteiger, die in dieser Phase abbrechen, lange brauchen, um wieder in ein Trainingsprogramm einzusteigen, da sie im Geiste keine Erfolgserlebnisse verbucht haben, die mit Training in Verbindung stehen. Wer durchhält, setzt das Rad der Bewegung und damit den Trainingserfolg in Gang. Es lohnt sich.

Indoor oder outdoor: 23 Minuten laufen

Warm-up: 5 Minuten normales Tempo

15 Minuten Intervall: 30 Sekunden schnelles Tempo und 2,5 Minuten normales Tempo im Wechsel

Cool-down: 3 Minuten gehen, normales Tempo



Seitenstechen durch falsches Atmen?

Das Gerücht hält sich hartnäckig, dass Seitenstechen beim Sport durch falsches Atmen ausgelöst wird. Die Ursache ist wissenschaftlich nicht eindeutig geklärt. Ich persönlich bekomme Seitenstechen, wenn ich zeitnah vor dem Sport zu viel gegessen oder getrunken habe. Manchmal hilft es, das Tempo zu verlangsamen und zu einer erschütterungsarmen, weichen Lauftechnik überzugehen. Sollte das nichts bringen: Verlege das Training auf einen anderen Zeitpunkt des Tages.





4. TAG: FOUR-PARTS TRAINING (circa 15 Minuten)


Wer nach dem Lauf gestern unter der Dusche stand, weiß jetzt, was mit der Komfortzone gemeint war: Zone, where the magic happens. Veränderung passiert erst, wenn wir unsere bequemen, bekannten Pfade verlassen und uns auf neue, effektive Herausforderungen einlassen.

30 x Dynamic Elbow Anchor rechts

30 x Butterfly Reverse in Bauchlage

30 x Dynamic Elbow Anchor links

30 x Upper Crunch: Lege dir zur Kontrolle einen Tischtennisball oder etwas Ähnliches unter die Schulterblätter. Der Ball darf nicht berührt werden.

1,5 Minuten Box Skipping: mäßiges Tempo



Wiederhole das Workout noch einmal.





Der Sixpack-Mythos

Wer regelmäßig Crunches macht, nimmt deshalb nicht hauptsächlich am Bauch ab. Crunches dienen dazu, die Muskeln am Bauch zwar schön zu definieren, Fett wird aber am ganzen Körper verbrannt, denn der sucht sich selbst aus, wo er das Fett verbrennen möchte. Es ist deshalb auch wichtig, dass du deinen Gegenspieler zum Bauch, den Rücken, ebenso regelmäßig trainierst. Tust du das nicht, leidet deine aufrechte Haltung und dein Rücken wird krumm, weil ihm der Halt gegenüber den starken Bauchmuskeln fehlt.





5. TAG: ALL YOU CAN DO (circa 19 Minuten)


Wenn du bis hierher alle Aufgaben erledigt hast, wirst du merken, dass es immer schwieriger wird auszusteigen. Du willst das, was du dir bis hierher erarbeitet hast, auf keinen Fall aufgeben.

Alle Übungen sind zeitlich begrenzt. Teile dir deine Intervalle gut ein, lasse die Pausen nicht zu lang werden. Wenn deine Kraft nachlässt, senke die Wiederholungszahl oder erhöhe die Pausenzeit.

Warm-up: 1 Minute lockeres Rope Skipping, dann 30 Sekunden Pause

2 Minuten Rope Skipping: so viele Sprünge wie möglich, dann 2 Minuten Pause

5 Minuten Dynamic Handplank: so viele wie möglich. Gestalte deine Pausen während der Übung selbst. Mache anschließend 2 Minuten Pause.

6 Minuten Push-up: so viele wie möglich





HALTUNG, BITTE!

Ziehe bei ALLEN Übungen die Schultern nach unten und lasse den Nacken lang. So trainierst du dir nicht nur eine gesunde Haltung an, die das Skelettsystem optimal stützt, sondern verleihst deinem Körper gleichzeitig eine würdevolle Ausstrahlung. Studien haben übrigens ergeben, dass sich die Körperhaltung auch auf das Gemüt überträgt.





6. TAG: INTERVAL BASIC WORKOUT (circa 25 Minuten)


Möglicherweise bist du bislang noch nie so sehr an deine sportlichen Grenzen gegangen wie bei den Push-ups gestern. Wenn du das nächste Mal keine Kraft mehr hast, wandle diese Erschöpfung gedanklich in Kraft um. Glaube mir, es funktioniert.

Warm-up: 2 Minuten Rope Skipping,Tempo im Sekundentakt

Squat (Übung in Sek./Pause in Sek.) 105/60

➜ 90/30 ➜ 75/0

Push-up auf Knien (Übung in Sek./Pause in Sek.)

75/60 ➜ 60/45 ➜ 45/30

Sprint (Übung in Sek./Pause in Sek.)

75/60 ➜ 60/30 ➜ 45/0

Butterfly Reverse in Bauchlage (Übung in Sek./Pause in Sek.)

75/60 ➜ 60/45 ➜ 45/30

Upper Crunch (Übung in Sek./Pause in Sek.)

75/30 ➜ 60/30 ➜ 45/0

Box Skipping (maximales Tempo in Sek./zügiges Tempo in Sek.)

10/20 ➜ 10/20 ➜ 10/20



Cool-down: 1 Minute schnelles Gehen auf der Stelle





7. TAG: TWELVE-HOURS WORKOUT (12 STUNDEN)


Mit diesem Tag endet unsere erste Trainingswoche. Übrigens kannst du ganz nebenbei auch noch etwas Gutes für dein Umfeld tun: Gib deine Erfahrungen weiter, erzähle, was du bisher über dich gelernt hast, und zeige, dass ein starker Wille ein Leben verändern kann. Ich hoffe, dass so viele Menschen wie möglich von diesem Buch erfahren und diesen Weg in ein gesünderes und fitteres Leben wählen. Denn dieses Projekt hat Erfolgsgarantie. Wer mich kennt, weiß, dass ich gnadenlos ehrlich bin. Das hat zwar schon so manchen Kunden in die Flucht geschlagen, aber die, die geblieben sind – wie auch meine Freunde, Familie und Arbeitskollegen –, vertrauen mir, denn das, was ich sage, funktioniert. Glaube auch du mir, halte dich an das, was ich dir rate, und du wirst in Kürze einen neuen Freund im Spiegel begrüßen können: dich in deinem neuen Körper.

Heute erwartet dich die härteste Probe der Woche. Der Wochen-Showdown, denn es ist Sixpack-Feeling angesagt. Spanne den ganzen Tag deinen Bauch an. Egal, ob du gerade im Auto sitzt, im Büro bist oder Fahrrad fährst.

Ziehe den Bauchnabel ein, spanne dabei deine Bauchmuskeln an, atme aber trotzdem ruhig und gleichmäßig weiter.

Bewahre Haltung! Zeige eine stolze Brust, indem du die Schultern nach hinten unten absenkst und den Nacken lang lässt.



Diese Übung kannst du dir auch für die Zeit nach dem Buch merken. Natürlich ersetzt sie kein Training. Es handelt sich hierbei lediglich um ein kleines Zusatztraining. Wie viele Momente am Tag lassen wir ungenutzt verstreichen, dabei könnten wir sie wunderbar für eine kleine Trainingseinheit verwenden. Dafür soll dich diese Übung sensibilisieren. Spüre die Trainingslücken des Tages auf und spanne die Bauchmuskeln an. Je länger und öfter du es schaffst, umso besser.





8. TAG: PAUSENTAG




Deine erste große Herausforderung hast du bestanden. Du bist mit den Aufgaben gewachsen, vielleicht sogar bereits über dich hinaus. Du hast dich ein gutes Stück vom Aufgeben entfernt und kannst stolz auf dich sein. Aber bitte cool bleiben und hart weitertrainieren. Nur wer sich bis zum Ende durchbeißt und jede einzelne Trainingseinheit nach bestem Gewissen ausführt, hat wirklich Grund zur Euphorie. Vorher heißt es: Zähne zusammenbeißen und weitermachen.

Deine Muskeln haben sich die erste wohlverdiente Pause erarbeitet. Heute findet kein Training statt. Lege dein Augenmerk auf gutes Essen. Bitte keine übermotivierten Sportaktionen. Dieser Tag dient der Regeneration und ist dringend einzuhalten. Denn wer richtig trainiert, braucht auch Pausen. Überprüfe noch einmal, ob du wirklich dein Bestes gegeben hast.





9. TAG: AS LONG AS YOU CAN (circa 18 Minuten)


Seit einer Woche lebst du nun so vorbildlich, wie du kannst. Du weißt alles über Ernährung, was du wissen musst, um effektiv abzunehmen, und trainierst jeden Tag. Training und Ernährung sind nur eine Frage der Einstellung – alle Menschen haben dasselbe Grundbedürfnis: von Mama und Papa, unseren Kindern, Freunden und Kollegen geliebt zu werden. Als wir auf die Welt kamen, wurde dieses Bedürfnis nach Liebe oft mit Nahrung befriedigt: Baby weint und Mama lüpft ihr Shirt. Und auch später noch: ein Schokoriegel als Trost nach dem Fahrradunfall, das Lieblingsessen wird gekocht, weil die Freundin weggezogen ist … Nahrungsaufnahme wurde auf diesem Weg schon immer eng mit Emotionen verknüpft.

Aber nun sind wir erwachsen und wissen, wie wir es uns gut gehen lassen können und dass Liebe nicht im Schokoriegel steckt. Wir entkoppeln das Gespann, indem wir uns bewusst machen, dass wir uns und unseren Körper mehr lieben werden, wenn wir auf den Schokoriegel verzichten. Und wir lernen noch etwas: gelassen zu sein! Denn kein anderer Gemütszustand bremst die Fettverbrennung mehr als Stress. Befinden wir uns in einer Stresssituation, produziert der Körper vermehrt die Hormone Cortisol und Ghrelin. Ghrelin regt den Appetit an, denn bei Stress denkt der Körper unter anderem an Hungersnot und will Vorräte anlegen. Cortisol führt dazu, dass die überschüssigen Kalorien als Bauchfett eingelagert werden. Das macht keinen Traumkörper. Also ran an den Speck!

3 Minuten Box Skipping: So schnell, wie du willst, so viele, wie du schaffst.



Setze die Pausen bei den folgenden Übungen selbst, maximal 10 Sekunden.

5 Minuten Squat

6 Minuten Dynamic Elbow Anchor, rechts und links jeweils 3 Minuten

4 Minuten Upper Crunch





10. TAG: BOXER'S WORKOUT (circa 18 Minuten)


Heute hast du ein Sechstel des Programms absolviert. Vielleicht hast du es bereits geschafft, dem Training einen festen Platz in deiner Morgenroutine zu geben: aufstehen und direkt wieder hinlegen – auf die Trainingsmatte, schwitzen, duschen, frühstücken und rein in den Tag. Wir starten oft mit Rope Skipping als Warm-up. Wer sich zwischendurch denkt: „Boah, wie langweilig!” – Achtung! Seilspringen verbrennt deutlich mehr Kalorien als Crosstrainer, Fahrrad-Ergometer oder sogar Joggen.

Warm up: 5 Minuten Rope Skipping, so fehlerfrei wie möglich

EIN DIAMANT IST EIN STÜCK KOHLE, DAS MEHR AUSDAUER HATTE ALS DIE ANDEREN.

Herkunft unbekannt



1,5 Minuten Lunge rechts

1 Minute Jumping Jab rechts: schnelles Tempo

1,5 Minuten Lunge links

1 Minute Jumping Jab links: schnelles Tempo

Upper Crunch und Lower Crunch im Wechsel ohne Pause (Übungen in Sek.)

60/60 ➜ 45/45 ➜ 45/45



Cool-down: 3 Minuten Rope Skipping in langsamem Tempo





11. TAG: BASIC RUN PLUS (circa 25 Minuten)


Heute geht es wieder an die frische Luft. Es gibt kein schlechtes Wetter, es gibt nur schlechte Kleidung. Diese Extraportion Sauerstoff macht nicht nur wach, sondern auch schön. Im Sommer gibt’s einen Hauch Farbe ins Gesicht, bei Regen einen Feuchtigkeitskick. Ein günstigeres Lifting, als durch winterkalte Luft zu rennen, habe ich noch nicht entdeckt. Raus mit dir!

Outdoor: 20 Minuten laufen

5 Minuten normales Tempo ➜ 1 Minute schnelles Tempo ➜ 3 Minuten normales Tempo ➜ 1 Minute schnelles Tempo ➜ 3 Minuten normales Tempo ➜ 1 Minute schnelles Tempo ➜ 3 Minuten normales Tempo

Cool-down: 3 Minuten gehen, normales Tempo

Anschließend zu Hause oder auch draußen:



45 Sekunden Push-up auf Knien: so viele wie möglich

1 Minute Snow Angel in Bauchlage



Wiederhole die Übungen jeweils 3-mal im Wechsel.





BESORGE DIR LAUFSCHUHE

Absolviere bitte die Laufeinheiten nicht in flachen Sommerschuhen, Chucks oder ähnlichem Schuhwerk. Besorge dir ein paar Laufschuhe – deinen Gelenken zuliebe.





12. TAG: BALANCE CORE (circa 18 Minuten)


Ein Wort zu den zahlreichen Boxfitness-Elementen. Ich hoffe, du findest Gefallen daran, denn die Kampfsport-Workouts gehören zu den effektivsten sportlichen Aktivitäten. Sie machen schnell und athletisch, kräftigen, sind ausdauernd und auspowernd zugleich. Zudem ist der Kalorienverbrauch enorm hoch und die Übungen machen obendrein noch großen Spaß.

Warm-up: 1 Minute Rope Skipping, möglichst gleichmäßig und flach

3 Minuten Jumping Jack

1,5 Minuten Lunge mit Knee Lift rechts (ziehe das hintere Knie nach vorn hoch – ohne Sprung): ohne Schuhe mit einem Kissen oder etwas ähnlich Wackeligem unter dem vorderen Fuß. Wenn dein Knie oben ist, halte jeweils 1 Sekunde die Balance.

50 x Dynamic Elbow Anchor rechts

1,5 Minuten Lunge mit Knee Lift links (ziehe das hintere Knie nach vorn hoch – ohne Sprung): ohne Schuhe mit einem Kissen oder etwas ähnlich Wackeligem unter dem vorderen Fuß. Wenn dein Knie oben ist, halte jeweils 1 Sekunde die Balance.

50 x Dynamic Elbow Anchor links



Cool-down: 3 Minuten Rope Skipping in langsamem Tempo





ROPE SKIPPING OHNE SEIL

Probleme mit den Nachbarn wegen des Seilspringens? Lass das Seil einfach weg und tue so, als ob du es noch in den Händen halten würdest. Lege eine Matte unter. Führe dann aber bitte schnelle kleine Sprünge aus, denn ohne Seil ist der Trainingseffekt deutlich geringer.





13. TAG: POWER COMBO (circa 21 Minuten)


Nur noch ein Tag, dann hast du die ersten zwei Wochen geschafft. Du hast mehr Power, denn Stoffwechsel, Muskeln, Bänder und Sehnen passen sich an das neue Leben an und schätzen die neuen Herausforderungen. Du wirst leichter, verbrennst Kalorien und weißt die bessere, gesündere Ernährung und die Energie, die sie dir liefert, zu schätzen.

EINE MÄCHTIGE FLAMME ENTSTEHT AUS EINEM WINZIGEN FUNKEN.

Dante Alighieri



8 x Jumping Jab rechts

8 x Rope Skipping ohne Seil

8 x Jumping Jab links

8 x Squat



Wiederhole die Cardioeinheit (1. bis 4.) in 7 Minuten so oft wie möglich. Mache dann 2 Minuten Pause.





6 Minuten Push-up auf Knien: Gestalte deine Pausen selbst, maximal 10 Sekunden.

Upper Crunch und Lower Crunch im Wechsel ohne Pause (Übungen in Sek.)

75/75 ➜ 60/60 ➜ 45/45





14. TAG: NO EXCUSES (8 MINUTEN)


Sechs Wochen noch. Vielleicht hast du nun eine Ahnung, was dich am Ende erwartet. Vergiss nicht, dich jede Woche zu fotografieren. Pinne deine Fotoserie an die Wand, damit du siehst, welche Sprünge du gemacht hast.

2 Minuten Box Skipping: so schnell du kannst

2 Minuten Squat: im tiefen Sitz haltend, ohne Pause

2 Minuten Butterfly Reverse in Bauchlage: ohne die kleinste Pause

2 Minuten Upper Crunch: ohne Pause





DIE AUSFÜHRUNG MACHT DEN UNTERSCHIED

Schnell kann jeder. Wichtig bei der Ausführung der Übungen ist eine andere Sache: Bestleistung statt Bestzeit, also WIE du die Übungen machst. Bei falscher Ausführung kann der Effekt um bis zu 80 Prozent verpuffen. Falsche Crunches beispielsweise bringen so viel für den Trainingserfolg, wie eine halbe Stunde länger zu schlafen, wenn man nicht bei jedem Anheben an seine Grenze geht.





15. TAG: PAUSENTAG


Wer die letzten Tage nach meinem Trainingsplan gearbeitet hat, wird seinen Körper deutlich spüren. Aus diesem Grund gibt es heute wieder einen Pausentag. Bitte nutze diesen Tag wirklich für eine sportliche Pause. Du wirst sie brauchen. Wenn möglich, gehe in die Sauna, ins Schwimmbad oder ins Kino, triff dich mit Freunden, kurz: Tue dir etwas Gutes, etwas, das dir wirklich Spaß macht, sodass du bestmöglich entspannen kannst. Und noch einmal zur Erinnerung: Bleibe deinen neuen Ernährungsgewohnheiten treu.



SCHLAFEN!

Wer hart trainiert und einen strengen Trainingsplan verfolgt, sollte auch darauf achten, einen Schlafplan einzuhalten, um dem Körper die nötige Menge an Regenerationszeit zur Verfügung zu stellen. Mindestens sieben Stunden Schlaf pro Nacht empfehlen Experten. Und: zwei Stunden vor dem Zubettgehen kein Training mehr. So viel Zeit braucht der Stoffwechsel, um wieder auf den Normalmodus herunterzufahren.





16. TAG: INTERVAL ATTACK (circa 18 Minuten)


Gestern Ruhe, heute Sturm. Wir wollen nicht viele Worte, sondern lieber Kilos verlieren! Heute wiederholen sich fast alle Übungen aus den letzten zwei Wochen. Schau dir das Workout genau an, präge es dir ein und lege los. Verliere keine Zeit zwischen den Übungen.

3 Minuten Sprint: schnelles Tempo

1,5 Minuten Squat: zügiges Tempo

1 Minute Box Skipping

1 Minute Push-up auf Knien: so viele wie möglich

1,5 Minuten Jumping Jab links

1 Minute Dynamic Elbow Anchor rechts

1,5 Minuten Jumping Jab rechts

1 Minute Dynamic Elbow Anchor links

1,5 Minuten Dynamic Handplank: in schnellem Tempo

1 Minute Jumped Knee Lift rechts: leicht mit dem vorderen Bein gesprungen

1,5 Minuten Box Skipping: schnelles Tempo

1 Minute Jumped Knee Lift links: leicht mit dem vorderen Bein gesprungen

1 Minute Snow Angel in Bauchlage





17. TAG: LEG AND ARM KILLER (circa 11 Minuten)


Man könnte unsere Fitnessreise mit einer Flussmündung vergleichen. Hier, an diesem Punkt des Trainings, vereinen sich zwei Flüsse und bilden einen größeren, stärkeren Strom: Die ersten Erfolge der Low-Carb-Ernährung und die des Muskeltrainings treffen aufeinander. Lass dich von diesem Strom mitreißen bis ans Ziel – dorthin, wo dein Körper an eine Lebensführung gewöhnt sein wird, die dich dauerhaft fit und schlank sein lässt.

Warm-up: 4 Minuten

1 Minute Joggen auf der Stelle

1 Minute Jumping Jab rechts

1 Minute Sprint

1 Minute Jumping Jab links





Es geht ohne Pause weiter:

45 Sekunden Push-up

45 Sekunden Trizeps Dip

45 Sekunden Push-up auf Knien

30 Sekunden Trizeps Dip, dann 10 Sekunden Pause

1 Minute Jumped Knee Lift rechts

45 Sekunden Deep Tap links

1 Minute Jumped Knee Lift links

45 Sekunden Deep Tap rechts





18. TAG: CORE CHECK (circa 17 Minuten)


Und wieder ein Training mit Crunches. Gemein? Nicht, wenn du lernst, sie zu lieben. Ich werde dir kein Werkzeug an die Hand geben, wie die kleinen fiesen Dinger leichter zu meistern sind, aber ich habe eine gute Idee, wie du sie intensivieren könntest: Atme aus, wenn du den Oberkörper anhebst. Je intensiver du ausatmest, desto größer ist die Anspannung in den Bauchmuskeln. Probiere es im Sitzen oder im Stehen einmal aus: Atme so lange aus, bis kein Hauch mehr zu hören ist. Stimmt's? Und jetzt ran an deine neue Lieblingsübung.

Warm-up: 3 Minuten Rope Skipping

Teil 1

1 Minute Dynamic Elbow Anchor rechts

2 Minuten Upper Crunch

1 Minute Dynamic Elbow Anchor links

2 Minuten Lower Crunch

3 Minuten Rope Skipping, dann 1 Minute Pause



Teil 2

45 Sekunden Block and Punch

1 Minute Anchor rechts

45 Sekunden Block and Punch

1 Minute Anchor links



Teil 1



Teil 2





19. TAG: ADVANCED RUN (30 MINUTEN)


Heute ist wieder ein Lauftraining angesagt. Nach einem fünfminütigen Warm-up-Lauf gibst du für 25 Minuten etwas mehr Gas. Von der sechsten bis zur 22. Minute erhöhst du dein Tempo über dein normales Lauftempo hinaus, sodass du keine normale Unterhaltung mehr führen kannst. Deine Atemfrequenz ist zwar hoch, aber nicht so hoch, dass du abbrechen müsstest. Passe dein Tempo immer wieder an. Wenn es sich leicht anfühlt, ziehe ein wenig an, und wenn du das Gefühl hast, du müsstest aufhören, drossle das Tempo etwas. Gehe für die letzten drei Minuten in ein lockeres Auslaufen über.

Es gibt übrigens außer deinem Unterbewusstsein noch eine andere große Motivationsbremse. Vielleicht hast du damit bereits Erfahrungen gemacht. Gibt es, wenn du von deinem Projekt erzählst, eher selten Anerkennung, sondern meist negative oder sogar abfällige Bemerkungen? In etwa so: „Wieso machst du dir so einen Stress?“,„Es gibt doch Wichtigeres“ oder „Das funktioniert sowieso nicht“. Da spricht der blanke Neid. Der Mensch ist ein soziales Wesen und kann nicht überleben, ohne mit anderen in Interaktion zu treten. Deshalb fällt es uns auch so schwer, uns nicht mit anderen zu vergleichen. Jetzt ist da plötzlich jemand, der alles richtig macht. Das nervt natürlich ungemein. Mache dir keine Gedanken darüber. Das ist reine Energieverschwendung. Glaube mir: JEDER Mensch wäre gern zufrieden mit seinem Körper. Neid ist – in einem Metier, das so von Konkurrenzkampf geprägt ist wie der Sport – eine Selbstverständlichkeit. Konzentriere dich auf dein Ziel, nutze den Zweifel von außen als Antrieb und gehe deinen Weg unbeirrt weiter.

WENN ICH ÜBERS WASSER LAUFE, SAGEN MEINE KRITIKER: "NICHT MAL SCHWIMMEN KANN DER."

Berti Vogts





20. TAG: PIZZA BOY COMBO (circa 27 Minuten)


Herzlichen Glückwunsch! Du bist am Ende des ersten Drittels deiner Route angelangt. Bitte während der Fahrt nicht mehr aussteigen! Phase eins ist mit dem heutigen Tag abgeschlossen und damit verlagern sich die Schwerpunkte von den Basics ein wenig zu den anspruchsvolleren Aufgaben.

10 x Jumping Jab rechts

10 x Jumping Jack

10 x Jumping Jab links

10 x Jumping Jack

45 Sekunden Deep Knee rechts: Der Oberkörper liegt am Oberschenkel an, der Oberschenkel des Standbeins ist fast parallel zum Boden.

45 Sekunden Static T-Stance rechts mit Snow Angel

45 Sekunden Push-up auf Knien, dann 30 Sekunden Pause

45 Sekunden Deep Knee links: Der Oberkörper liegt am Oberschenkel an, der Oberschenkel des Standbeins ist fast parallel zum Boden:

45 Sekunden Static T-Stance links mit Snow Angel

1 Minute Pizza Boy: normale Kreise, dann 30 Sekunden Pause

45 Sekunden Pizza Boy: kleine Kreise, maximales Tempo, dann 30 Sekunden Pause

45 Sekunden Pizza Boy: kleine Kreise, maximales Tempo



Wiederhole das Workout insgesamt 3-mal.





NUTZE JEDE SPORTLICHE CHANCE FÜR DICH


Ein Drittel unseres 60-Tage-Programms liegt jetzt hinter uns. Diese ersten 20 Tage sind von entscheidender Bedeutung für dein Durchhaltevermögen. Das Grundgerüst für dein neues sportliches Leben ist hiermit gebaut. Denn in jedem von uns steckt ein Sportler. Ich möchte dir dazu etwas aus meiner Kindheit erzählen:

Es gibt Babys, die sind wie ein Laib Brot: Weiß gepudert liegen sie den ganzen Tag herum, als wären sie nur zum Essen da. Dann sind da Babys, die schon sehr früh zu zappeln und zu plappern beginnen und insgesamt aktiver sind. Und schließlich gibt es Babys wie mich: Ich habe drei Kinderwagen zerschlissen, musste in freier Wildbahn an die Laufleine und mein Kinderbettchen glich einem Minihochsicherheitstrakt, nachdem ich mir bei einem Fluchtversuch den Arm gebrochen hatte. Nein, ich war nicht hyperaktiv, das hatte man meiner Mutter attestiert.

Es gibt eben unterschiedliche Typen, und das ist gut so. Wenn alle als Jäger auf die Welt kämen, wer würde dann Beeren sammeln? Ich unterscheide gern zwischen den Genießern, den aktiven Genießern und den Aktiven. Eine Tatsache, die den Erstgenannten allerdings einen willkommenen Nährboden für Ausreden liefert: „Ich bin kein sportlicher Typ“, „Ich war schon als Baby eher ruhig“ und so weiter. Aber man wird nicht als Sportler geboren – das ist ein Mythos. Als aktiver Mensch findet man nur schneller zum Sport. Obwohl von Natur aus unterschiedliche Wesensarten und Körpertypen existieren, haben sie doch alle etwas gemeinsam – und das ist die Reaktion des Körpers auf Sport. Die Fähigkeit, sich zu bewegen, ist, wie atmen und essen, eine lebenswichtige Notwendigkeit. Alle Menschen profitieren gleich davon, unabhängig von unserem Naturell, unserer Erziehung oder Herkunft. Sport ist ein entscheidender, wenn nicht DER entscheidende Weg zu einem besseren Selbst. Und wer jetzt sagt, das sei übertrieben, hat nicht wie ich miterlebt, wie sich Menschen durch Sport verändern können: vom vorsichtigen Zauderer zum selbstsicheren Winner. Das erlebe ich immer wieder bei meinen Kunden und in meinen Kursen. Nutze die Chance, die der Sport dir für dein Leben bietet.





MIT PHASE ZWEI KOMMST DU DEINEM ZIEL IMMER NÄHER. 60 TAGE! DAS IST ZU SCHAFFEN. STELLE DIR GANZ BEWUSST VOR DURCHZUHALTEN. DAS STÄRKT DEINEN WILLEN. DER KÖRPER BRAUCHT LAUT STUDIEN AUS DER REHABILITATIONSMEDIZIN ETWA 21 TAGE, UM PSYCHE UND PHYSIS ZU VERÄNDERN. AB JETZT HAT SICH DEIN KÖRPER AN DIE NEUE SITUATION – EINEN ALLTAG MIT SPORT – GEWÖHNT. LEGE DIESE GEWOHNHEIT BITTE NICHT MEHR AB!





21. TAG: POWER BLOCK (circa 15 Minuten)


Ab jetzt kannst du den Fokus noch etwas mehr auf die Intensität der Übungen legen. Deshalb starten wir diese Phase mit einer Trainingskombination, die deine Konzentrationsfähigkeit steigert, und das können am besten Übungen, die Balance erfordern.

2 Minuten Dynamic T-Stance: pro Seite 1 Minute. Standbein beugen und strecken; die Arme sind dabei angewinkelt und führen den Butterfly Reverse aus.

45 Sekunden Deep Knee rechts

1 Minute Push-up: wenn nichts mehr geht, auf den Knien abstützen

45 Sekunden Deep Knee links

1 Minute Push-up

2,5 Minuten Block (ohne Punch), das heißt, du bist nur auf den Unterarmen abgestützt. Wenn der Rücken schmerzt, lege einfach die Knie ab.

Cardioeinheit: Rope Skipping/Sprint in maximalem Tempo (Übungen in Sek.)

120/20 ➜ 90/20 ➜ 60/20 ➜ 20/20 ➜ 20/20 ➜ 20/0





22. TAG: PAUSENTAG


Es ist wieder so weit: Dein Körper braucht eine Erholungspause. Die Pause ist ein wichtiger Teil des Trainings, der deinen Körper voranbringt. Es ist keine Pause, in der nichts geschieht. Kleinste Muskelrisse werden geflickt, die Nährstofftanks aufgefüllt, das ganze System wird auf sein neues Trainingsniveau hin überprüft, angepasst und neu justiert. Deshalb ist es so wichtig, an diesem Tag ganz gezielt die Ernährung zu überprüfen. Nimm deshalb noch einmal das Kapitel über die Ernährung zur Hand. Mein Training hat neben seiner hohen Effektivität noch zwei weitere Pluspunkte: Es macht Spaß UND schmeckt! Wie gesagt: Es gibt keine Ausrede mehr, nicht zu trainieren.



DAS RAD DREHT SICH

Mit den vergangenen Tagen hast du es geschafft. Du hast das Rad der Energie in Bewegung gesetzt. Das Glücksrad der Veränderung, das nicht nur deinen Körper fitter macht, sondern auch andere Elemente deines Lebens verbessert. Du hast bis hierhin so viel geleistet, dass dein Körper jetzt weiß, dass alles möglich ist, und nicht mehr umkehren will. Du hast mehr Power, denn Stoffwechsel, Muskeln, Bänder und Sehnen passen sich an das veränderte Leben an und schätzen die neuen Herausforderungen. Jetzt schaust du nicht mehr weg, wenn es anstrengend wird, sondern gibst alles. Du wirst leichter, verbrennst Kalorien und weißt die gesündere Ernährung und die Energie, die sie dir liefert, zu schätzen. All das ist das Rad der Energie, das Zeichen deines starken Willens. Dieses Rad hat gerade erst angefangen, sich zu drehen – nach knapp zwei Wochen. Es wird jeden Tag schneller, die Erfolge, die du verbuchen wirst, werden nun sichtbar. Jeden Tag dreht sich dieses Rad weiter und die Kraft, mit der es dich schlank und fit macht, potenziert sich.





23. TAG: POWER OF THANKFULNESS (circa 18 Minuten)


Heute mal etwas zum Thema „Geht nicht – gibt’s nicht“. Etwas abgedroschen, aber dahinter steckt eine wichtige Trainingsweisheit: Es gibt „neu”, „ungewohnt”, „anspruchsvoll”, „anstrengend” …, aber nicht „geht nicht“. Sei froh, dass du gesund bist und die Möglichkeit hast, dieses Training überhaupt machen zu können. Ich wünsche mir, dass du dich eine Minute lang hinsetzt und dir all das, was du hast – und damit ist nicht „mein Haus, mein Auto, mein Boot“ gemeint, sondern die wahren Güter wie Gesundheit, Freunde, Familie oder Freiheit –, vor Augen führst und dankbar bist. Empfinde diese Dankbarkeit und nutze sie beim Training als positive Energie.

Upper Crunch (Übung in Sek./Pause in Sek.)

90/30 ➜ 75/30 ➜ 60/30 ➜ 45/20 ➜ 30/10 ➜ 15/5 ➜ 15/0

2 Minuten Trizeps Dip Advanced: pro Seite 1 Minute

30 Sekunden Trizeps Dip: so viele wie möglich

Lower Crunch (Übung in Sek./Pause in Sek.)

90/30 ➜ 75/30 ➜ 60/30 ➜ 45/20 ➜ 30/10 ➜ 15/5 ➜ 15/0





Was ist dran am Eiweißshake?

Viele Sportler schwören auf die süßen Shakes, die angeblich all das, was der Körper während des Trainings verloren hat, wiederauffüllen. Mein Rat: Finger weg von den Billigvarianten aus dem Drogeriemarkt! In den Dingern steckt meist jede Menge Zucker. Mache dir entweder selbst einen Shake aus Milch und Frucht. Dann weißt du definitiv, was drin ist. Und lecker ist er obendrein. Oder lasse dich in Fachgeschäften beraten.





24. TAG: DOUBLE POWER (circa 16 Minuten)


Heute gehst du bei den Übungen – auch wenn sie dann nicht mehr vollkommen aussehen – an deine Grenze. Schlucke den positiven Schmerz hinunter und erreiche das Ziel. Wenn du das Gefühl hast, dich beispielsweise beim Push-up kaum noch auf und ab zu bewegen, sieh auf deinen Ellenbogen. Dir wird bewusst, dass du noch ganz gut dabei bist, und du wirst weitermachen. Ein Trost: Fünf Sekunden nach Ablauf der Zeit ist der Schmerz schon wieder weg.

Warm-up: 4 Minuten Rope Skipping, so flach wie möglich über dem Boden, auch wenn du viele Fehler machst

Teil 1

1 Minute: 4 x Dynamic Handplank, dann 1 x Push-up, möglichst oft wiederholen; Hände etwas weiter als schulterbreit aufsetzen

20 x Squat: die letzte Wiederholung 8 Sekunden unten halten

20 x Deep Tap rechts

20 x Squat: die letzte Wiederholung 8 Sekunden unten halten

20 x Deep Tap links

1 Minute Dynamic T-Stance rechts



Teil 2

Wie Teil 1, jedoch bei Übung 1 statt des Push-ups 1 x Block and Punch, Übung 3 und 5 Deep Knee, Übung 6 Dynamic T-Stance links.





25. TAG: CLIFF YOUNG'S ENERGY WORKOUT (circa 20 Minuten)


Ich möchte dir heute die Geschichte von Cliff Young erzählen. Cliff ist ein australischer Bauer. Im Alter von 61 Jahren startete er beim Ultramarathon von Sidney nach Melbourne (875 Kilometer). Nur die Besten der besten Spitzenathleten der Welt wagen sich an den Fünf-Tage-Marathon heran. Die besten der Welt – und Cliff. In Overall und Gummistiefeln holte er sich seine Startnummer ab. Presse, Ärzte und Athleten versuchten, ihn von seinem Vorhaben abzubringen, aber er ging an den Start. Wer bei einem Rennen dieses Kalibers irgendetwas erreichen will, muss Kräfte und Etappen penibel planen, um auch nur ansatzweise eine Chance zu haben. Üblicherweise laufen die Athleten 18 Stunden und schlafen dann sechs Stunden. Cliff wusste nichts von dieser Einteilung. Er lief Tag und Nacht durch – und gewann. Das Preisgeld von 10 000 Dollar verschenkte er an die Mitläufer. Als ihn später ein Journalist fragte, wie er sich auf das Rennen vorbereitet habe, sagte er: „Ich wuchs auf einer Farm auf, wir hatten weder Pferde noch Traktoren, also musste ich unsere 2000 Schafe zu Fuß eintreiben. Unser Land war 2000 Morgen groß. Ich wusste, ich würde das Rennen schaffen.“ Egal ob Mythos, Legende oder Wahrheit: Was sind nach dieser Geschichte 20 Minuten Workout?

2 Minuten Rope Skipping, 1 Minute Jumping Jab rechts: Einheiten noch einmal wiederholen, dann 1 Minute Pause

4 Minuten: 20 Sekunden Joggen auf der Stelle, 10 Sekunden schnelle Sprints, insgesamt 8 x im Wechsel wiederholen

1 Minute Jumping Jack, 30 Sekunden schnelle Box Skippings: Einheiten noch einmal wiederholen

2 Minuten Rope Skipping, 1 Minute Jumping Jab links: Einheiten noch einmal wiederholen





26. TAG: PAUSENTAG


Heute ist Pausentag. Noch ein paar Worte zum Thema „Erkältung und Co.“. Natürlich geht es bei diesem Training auch ums Durchhalten. Aber wer krank ist, trainiert nicht, sondern bleibt im Bett oder schont sich. Krank zu trainieren, kann lebensgefährlich sein. Wer seinem Körper bei einer Erkältung nicht die entsprechende Ruhe gönnt, riskiert, die Erkältung zu verschleppen. Die Entzündung kann – vor allem bei Halsentzündungen – andere Organe wie beispielsweise das Herz befallen. Sport beansprucht den Körper. Und da der Stoffwechsel nur bedingt multitaskingfähig ist, kann er sich nicht um beides kümmern: Entweder er erholt sich oder er setzt seine Kräfte für das Training ein. Keine Angst – die Muskelmasse, die du während deiner Krankheitsphase eventuell verlierst, auch wenn es zwei Wochen sind, baust du schnell wieder auf. Wenn du gründlich auskuriert bist, kannst du einfach da weitermachen, wo du aufgehört hast. Dein Körper wird dir signalisieren, wann er wieder fit ist fürs Training. Höre auf ihn!





27. TAG: CANDY WORKOUT (circa 20 Minuten)


Bald ist Bergfest – die Hälfte ist fast geschafft. Ich würde mich freuen, wenn so viele Leser wie möglich die Inhalte dieses Konzepts auch nach Tag 60 weitestgehend in ihren Alltag integrieren. Und seien es nur die Ernährungstipps, vor allem wenn es um den Zucker geht. Denn Zucker verklebt das Eiweiß im Körper, sodass beispielsweise die Haut unelastisch wird und Falten wirft. Ihn einfach wegzulassen, ist aber gar nicht so leicht. Oft ist er in den Nahrungsmitteln gut versteckt. Wer sich die Inhaltsstoffe auf den Verpackungen durchliest, findet selten noch den Hinweis „Zucker“. Doch alles, was auf „-ose“ endet, ist Zucker: Dextrose, Maltose, Glukose. Der Mensch braucht nicht viel davon und in den meisten Nahrungsmitteln ist Zucker bereits enthalten. Wenn wir zusätzlich noch Industriezucker (Schokolade, Kuchen, Zucker im Kaffee …) zu uns nehmen, wandelt der Körper die überschüssige Energie in Fett um. Doch keine Sorge: Der Körper gewöhnt sich schnell an den neuen Zuckerpegel. Nach einer Woche schmeckt bereits alles, was gesüßt ist, viel zu süß. Wenn du Lust auf Naschkram hast: Verfeinere Obst oder einen Naturjoghurt mit etwas Honig oder iss einfach ein paar Nüsse und Rosinen.

Warm up: 3 Minuten Diagonal Knee Crunch, 1,5 Minuten pro Seite

Deep Tap rechts/Deep Tap links/Push-up/Upper Crunch (Übungen in Min.) 2

➜ 2 ➜ 1 ➜ 1

Deep Knee rechts/Deep Knee links/Push-up auf Knien/Lower Crunch (Übungen in Min.) 2

➜ 2 ➜ 1 ➜ 1

Snow Angel/Trizeps Dip/Dynamic Handplank/Butterfly Reverse in Bauchlage (Übungen in Min.) 1

➜ 1,5 ➜ 1 ➜ 1



Mache zwischen den Übungsblöcken jeweils 30 Sekunden Pause.





28. TAG: 60-SECONDS CHALLENGE (circa 16 Minuten)


Heute steht wieder eine meiner Lieblingsübungen auf dem Programm: der Jumping Jab. Übungen aus dem Bereich Boxfitness lassen mich immer an einen der größten Sportler der Welt denken: Muhammad Ali. In diesem Sinne heute ein Tipp von ihm zur perfekten Ausführung eines Jumping Jabs:

Gemeint ist, die Bewegungen des Körpers fließend auszuführen (float like a butterfly), aber die Schlaghand schnell und kraftvoll zustechen zu lassen wie den Stachel einer Biene (sting like a bee).

Jede Übung 1 Minute ohne Pause

FLOAT LIKE A BUTTERFLY, STING LIKE A BEE.

Muhammad Ali



Dynamic T-Stance links

Jumping Jab rechts

Dynamic T-Stance rechts

Jumping Jab links

Box Skipping

Jumping Jack

Box Skipping

Jumping Jack

Jumped Knee Lift links

Jumping Jab links

Jumped Knee Lift rechts

Jumping Jab rechts

Box Skipping

Diagonal Knee Crunch links

Box Skipping

Diagonal Knee Crunch rechts





29. TAG: 30-SECONDS CHALLENGE (circa 16 Minuten)


Wahrscheinlich bemerkst du zunehmend, wie sich dein Körper zum Guten verändert. Wer regelmäßig leichte Rückenbeschwerden hatte, dürfte eine deutliche Linderung verspüren. Übrigens sind mehr als die Hälfte der rund 160 000 Bandscheibenoperationen in Deutschland pro Jahr völlig überflüssig. Oftmals leiden die Puffer zwischen den Wirbeln einfach nur zu lange unter Nährstoffmangel, verursacht durch zu wenig Bewegung. Auch Rückenschmerzen sind also keine Ausrede, um nicht Sport zu treiben. Im Gegenteil: Jetzt erst recht! Aber bitte vorher mit dem Arzt sprechen.

Warm-up: 3 Minuten Diagonal Knee Crunch, 1,5 Minuten pro Seite

30 Sekunden Push-up auf Knien

30 Sekunden Pizza Boy

30 Sekunden Trizeps Dip

30 Sekunden Butterfly Reverse

30 Sekunden Block and Punch



Wiederhole das Workout insgesamt 4-mal, dazwischen jeweils 1 Minute Pause.





30. TAG: DEEP POWER (circa 15 Minuten)


Herzlichen Glückwunsch! Du hast das Basiscamp auf halber Strecke zum Gipfel erreicht. Was für ein wundervoller Ausblick, wenn du an deinem Körper hinunterschaust, oder? Es wird noch viel besser. Dieses Konzept lässt dem inneren Schweinehund ohnehin kaum eine Chance. Für alle, die dennoch ab und an Diskussionen mit ihm führen: Ignoriere ihn, ziehe deine Sportklamotten an, während er vor dir herumhopst und versucht, dich von deinem Glück abzubringen. Sobald du den ersten Schritt gemacht hast, ist er still. Er wird aufgeben. Vertraue mir. Je mehr du dich ernst nimmst, desto mehr nimmt auch er dich ernst, respektiert dein Vorhaben und lässt dich trainieren.

Warm-up: 3 Minuten 4 x Jumping Jab rechts, 4 x Jumping Jab links im Wechsel

10 x Squat

20 x Deep Tap rechts

10 x Squat

20 x Deep Tap links

10 x Squat

20 x Deep Knee rechts

10 x Squat

20 x Deep Knee links

1,5 Minuten Trizeps Dip Advanced links

1,25 Minuten Dynamic T-Stance rechts

1,5 Minuten Trizeps Dip Advanced rechts

1,25 Minuten Dynamic T-Stance links





31. TAG: TWIN TRAINING (circa 18 Minuten)


Bevor du dich ans Training machst, noch eine Sache: Ich werde oft gefragt, wie wichtig eine zusätzliche Portion Vitamin C ist. Auch hier gilt: Viel hilft nicht viel. Bei all den überflüssigen Vitaminen, die von Brausetablettenschlürfern tagtäglich über den Toilettengang in die städtische Kanalisation gespült werden, können wir davon ausgehen, dass wir uns um die Gesundheit unserer Ratten keine Sorgen machen müssen. Im Klartext: Wer sich ausgewogen ernährt, braucht keine zusätzliche Dosis Vitamin C.

Dynamic Handplank/Butterfly Reverse in Bauchlage (Übungen in Sek.)

60/90 ➜ 60/90 ➜ 45/75

2 Minuten: 10 x Deep Knee rechts, 10 x Dynamic T-Stance rechts, im zügigen Wechsel wiederholen

Block and Punch/Snow Angel in Bauchlage (Übungen in Sek.)

60/90 ➜ 60/90 ➜ 45/75

2 Minuten: 10 x Deep Knee links, 10 x Dynamic T-Stance links, im zügigen Wechsel wiederholen





32. TAG: BASIC RUN II (circa 35 Minuten)


Ein großes Lob an dich. Sport gehört zu deinem Alltag. Du hast es bis hierhin geschafft. Aber mein Training ist umfassender und betrifft nicht nur den Körper, sondern auch den Kopf. Heute ist in der Sportwissenschaft bekannt, dass die Psyche eine mächtige Komponente beim Training ausmacht. Wenn dein Kopf nicht will, wollen deine Muskeln auch nicht. Es gibt jedoch ganz einfache Tricks, wie du deine Psyche dahin bringen kannst, dass sie deine Muskeln dennoch zu Höchstleistungen antreibt: Schließe die Augen und stelle dir vor, wie du dich in knapp 28 Tagen fühlen wirst. Lass das Gefühl einen Augenblick wirken. Dann öffne die Augen. Glaube an dich! Es gibt Tage, da möchte man aufgeben, weil einem das Vorhaben plötzlich nicht mehr wichtig erscheint. Deine Prioritätenliste verschiebt sich heimlich zurück in die gewohnte Ausgangsposition. Sport muss Überstunden im Job oder einem familiären Problem weichen. STOPP! Lasse nicht zu, dass du dein Ziel aus den Augen verlierst. Du hast dir doch alles genauestens überlegt. Warum sollten deine Überlegungen und dein Ziel wegen ein paar starker Böen im Alltag ihren Wert verlieren? Man kann seinen Tagesplan IMMER so umbauen, dass sich Zeit für ein paar Minuten Training findet. Notfalls hängst du die versäumte Einheit nach 60 Tagen hintendran. Oft sind es die fehlenden sichtbaren Erfolge, die uns mutlos machen. Die Problematik des Durchhaltens hat ein italienischer Philosoph einmal sehr schön dargestellt:

ALLES WAHRHAFT GROSSE VOLLZIEHT SICH DURCH UNMERKLICHES, LANGSAMES WACHSEN.

Lucius Annaeus Seneca



Outdoor: 35 Minuten laufen

Warm-up: 5 Minuten laufen, langsames Tempo

Du kennst nun dein Limit. Reguliere dein Tempo so, dass du 25 Minuten durchhältst. Wer nicht laufen darf oder kann, kann auch schnell walken.

Cool-down: 5 Minuten auslaufen oder gehen, normales Tempo





33. TAG: MY OWN TRAINING (circa 15 Minuten)


Um deinem Ziel näherzukommen, ist es wichtig, Ehrgeiz, Durchhaltevermögen und Kampfgeist zu zeigen. Du erinnerst dich? WILLE! Du hast nun sehr viele Übungen kennengelernt und bist imstande, dir dein eigenes Workout zusammenzustellen. Eine Vorbereitung für die Zeit nach dem Buch. Eigene Workouts zu basteln, um das Trainingsniveau zu halten, wird zu deinem Alltag dazugehören wie frühstücken oder fernsehen.

Mache deinen Feind zum Freund – dein erstes eigenes Workout. Baue dir aus drei oder mehr Übungen deinen ersten Trainingsplan zusammen. Er sollte mindestens 15 Minuten dauern. Suche dir die Übungen heraus, die dir am wenigsten liegen, die du am wenigstens kannst und die du am meisten hasst. Das können drei Übungen aus dem Kraft- oder Ausdauerbereich sein. Wenn du Kraft wählst, wärme dich vorher mit einer kleinen Cardioeinheit auf, etwa mit Rope Skippings oder Sprints. Achte bei den Kraftübungen darauf, dass du unterschiedliche Muskelgruppen trainierst. Absolviere das Workout heute 3-mal, am besten morgens, mittags und abends. Los geht’s: Schnappe dir Papier und Stift und wähle Übungen aus, die du nicht magst.



DEIN TRAINING – DEIN ERFOLG

Versuche immer wieder, das Training als etwas Positives zu sehen. Diese Sporteinheiten gehören dir allein. Du tust dir damit etwas Gutes. Wenn du Lust hast, kannst du dich gern für bestimmte Einheiten mit Freunden verabreden. Vor allem die Lauftage sind dafür geeignet.





34. TAG: PAUSENTAG


Es ist mal wieder so weit: ein Tag Pause. Ich will nicht sagen wohlverdient, sondern selbstverständlich. Der Körper braucht wie gesagt Zeit, um zu regenerieren – und auch die Gedanken müssen mal schweifen dürfen. So kannst du morgen noch mehr Einsatz zeigen und hoch konzentriert an deinem Vorhaben weiterarbeiten.



Schwitz dich schlank?

Wenn du an einem Pausentag gern in die Sauna gehen möchtest, ist das eine gute Idee, um zu entspannen. Doch wer glaubt, dass bei den Temperaturen in der Sauna auch das Fett schmilzt, hat sich getäuscht. Zwar zeigt die Waage nach dem Saunagang ein paar Gramm weniger an, aber leider ist es nicht Fett, das wir hier verloren haben, sondern Wasser. Die Menge an Kilokalorien, die in der Sauna durch den erhöhten Stoffwechsel verbrannt wird, ist leider unbedeutend gering.





35. TAG: REACH THE STARS (circa 17 Minuten)


Die Pause wird dir gutgetan haben, doch jetzt geht es weiter: Schauen wir in Richtung Ziel und greifen nach den Sternen – zumindest in der zweiten Phase, die nur noch wenige Tage dauert.

Warm-up: 3 Minuten Rope Skipping, so viele Sprünge wie möglich

5 Minuten Push-up auf Knien: Absolviere so viele wie möglich und bestimme deine Pausen selbst. Halte die Pausen kurz und sei ehrlich zu dir selbst.

3 Minuten Deep Tap rechts: Absolviere so viele wie möglich. Lege dir ein circa 50 Zentimeter breites Handtuch zwischen die Beine. Du darfst es mit den Füßen nicht berühren. Gestalte deine Pausen selbst.

3 Minuten Upper Crunch: keine Pause

3 Minuten Deep Tap links: Absolviere so viele wie möglich. Lege dir ein circa 50 Zentimeter breites Handtuch zwischen die Beine. Du darfst es mit den Füßen nicht berühren. Gestalte deine Pausen selbst.





KALIUMBOOSTER FÜR STARKE MUSKELN

Bist du morgens immer müde, abends aber hellwach? Vielleicht hast du zu wenig Kalium. Wir befinden uns in einem Stadium des Trainings, in dem die Leistung durchaus aufgrund von Kaliummangel stagnieren kann. Der Körper braucht diesen Mineralstoff, um die Energietanks der Muskeln zu füllen, und er hilft außerdem bei der Fettverbrennung. Aber das Problem kann leicht behoben werden: mit Obst! Zum Beispiel mit einem Fruchtshake: einen Apfel, eine Karotte, eine Orange schälen und in den Mixer geben. Fertig ist das perfekte Frühstücksgetränk. Natürlich darfst du dazu noch etwas essen.





36. TAG: ROCKY’S GOOD MORNING WORKOUT (circa 21 Minuten)


Effektives Training ist immer zeitintensiv. Also muss es täglich oder, wenn nicht täglich, in größeren Zeitblöcken an weniger Tagen absolviert werden. Die Zeiteinheiten bei meinem Training sind relativ kurz, doch für manchen straff organisierten Lebensplan immer noch ein kleines logistisches Problem. Wo und wie kannst du also noch etwas Zeit abzwacken? Vielleicht kannst du ein bisschen früher aufstehen? Oder statt 3-mal die Woche Kleinkram einzukaufen, einen gut organisierten Großeinkauf auf den Samstag legen? So bleibt während der Woche Zeit fürs Training.

Absolviere zwei Runden des folgenden Workouts, mache dazwischen 1 Minute Pause:



	 	 	 Runde 1 (in Min.)

	 	 	 Runde 2 (in Min.)



	 	 	 1. Rope Skipping

	 	 	 1

	 	 	 2



	 	 	 2. Box Skipping

	 	 	 1

	 	 	 1



	 	 	 3. Jumping Jack

	 	 	 1

	 	 	 2



	 	 	 4. Rope Skipping

	 	 	 2

	 	 	 2



	 	 	 5. Jumping Jab rechts

	 	 	 1

	 	 	 2



	 	 	 6. Jumping Jack

	 	 	 1

	 	 	 1



	 	 	 7. Jumping Jab links

	 	 	 1

	 	 	 2





DEHNEN: JA ODER NEIN?

Die Antwort: ein klares Jein. Wer die Übungen richtig ausführt, braucht eigentlich nicht zu dehnen, denn das Training ist so aufgebaut, dass die muskuläre Balance gewährleistet ist. Alltagsunübliche Übungen finden hier auch nicht statt, was ein Argument für das Dehnen wäre. Trotzdem empfehle ich regelmäßige Dehneinheiten zur Steigerung der Flexibilität, wie zum Beispiel beim Yoga oder Pilates.





37. TAG: DO IT AGAIN I (circa 21 Minuten)


Das Gleiche wie gestern PLUS Sprints. Der Hintergrund von „Do it again" – also der Wiederholung des Trainings vom Vortag – ist der, dass du die Übungsabfolgen verinnerlicht hast und nun gezielt an einer Leistungssteigerung und Ausführungsperfektionierung arbeiten kannst. Gib alles und noch mehr: Der Unterschied zu gestern ist, dass du am Ende des zweiten Blocks bei jeder Übung die letzten 10 Sekunden wirklich VOLLGAS gibst. Go!

Absolviere zwei Runden des folgenden Workouts, mache dazwischen 1 Minute Pause:



	 	 	 Runde 1 (in Min.)

	 	 	 Runde 2 (in Min.)



	 	 	 1. Rope Skipping

	 	 	 1

	 	 	 2, die letzten 10 Sekunden Vollgas



	 	 	 2. Box Skipping

	 	 	 1

	 	 	 1, die letzten 10 Sekunden Vollgas



	 	 	 3. Jumping Jack

	 	 	 1

	 	 	 2, die letzten 10 Sekunden Vollgas



	 	 	 4. Rope Skipping

	 	 	 2

	 	 	 2, die letzten 10 Sekunden Vollgas



	 	 	 5. Jumping Jab rechts

	 	 	 1

	 	 	 2, die letzten 10 Sekunden Vollgas



	 	 	 6. Jumping Jack

	 	 	 1

	 	 	 1, die letzten 10 Sekunden Vollgas



	 	 	 7. Jumping Jab links

	 	 	 1

	 	 	 2, die letzten 10 Sekunden Vollgas





DIE BALANCE HALTEN

Bei allen Übungen, die Gleichgewichtssinn erfordern, wie zum Beispiel der T-Stance oder Deep Knee, hilft es, sich auf einen Punkt im Raum zu konzentrieren. Beim T-Stance sollte er in Blickrichtung direkt vor dir auf dem Boden liegen, bedingt durch deine Kopfhaltung, da der Nacken lang bleiben soll. Beim Deep Knee schaust du etwa 20 Zentimeter vor den Füßen zum Boden.





38. TAG: SEXY ARMS (circa 20 Minuten)


Eine meiner Kundinnen berichtete mir, als sie zum ersten Mal eine Einheit Personal Training bei mir buchte, wie unglücklich sie über ihre „Wackelarme“ sei. Eines kann ich dir versprechen: Mehr als dieses Training durchzuziehen, kannst du gegen schlaffe Oberarme nicht tun. Da das Konzept sehr viele Elemente aus dem Boxsport beinhaltet, die sich auf Armarbeit konzentrieren, und dazu viele Stützübungen dabei sind, werden deine Arme maximal trainiert.

3 Minuten Snow Angel: Mache dazwischen maximal drei Pausen zu je 15 Sekunden.

20 x Block and Punch

5 Minuten Box Skipping

Dynamic Handplank/Push-up (Übungen in Min.) 1,5/1,5

➜ 1/1 ➜ 1/1





Energieriegel und Co.

Mehr Kraft durch Energieriegel? Weg damit. Wir bereiten uns nicht auf Olympia vor, sondern machen uns fit. Leistungssportler, die täglich mehr als 90 Minuten trainieren, sind auf zusätzliche Energie angewiesen. Wenn du nach den Vorgaben zu Beginn des Buches isst, hat dein Körper trotz des Trainings alles, was er braucht.





39. TAG: BASIC RUN III (circa 40 Minuten)


Noch knapp 20 Tage – Zähne zusammenbeißen. Heute wird wieder gelaufen. Grundsätzlich teilt sich die Riege der Läufer in zwei Lager: Morgenläufer und Abendläufer. Es ist ganz einfach eine Frage der Vorliebe und der körperlichen Verfassung. Bei manchen Menschen kommt der Kreislauf morgens nur sehr schwer auf Touren, andere wiederum sind um 8 Uhr früh so fit, dass sie schon Bäume ausreißen könnten. Wer spät (nachmittags oder abends) läuft, kann aber die Gelegenheit direkt nutzen, um Stress abzubauen. Das hilft beim Abnehmen, denn Stresshormone bremsen die Fettverbrennung.

Outdoor: Gehe raus und bestreite deine bisher längste Ausdauereinheit. Laufe mindestens 35 Minuten.

Cool-down: 5 Minuten auslaufen oder gehen, normales Tempo



SCHLUSSSPURT: JA ODER NEIN?

Hier wieder ein klares Jein. Für alle Laufeinsteiger: Wenn ihr knapp 30 Minuten gelaufen seid, sind eure Gelenke, Knochen und Sehnen müde. Der kleinste Stein kann dazu führen, dass ihr umknickt, weil auch euer Reaktionsvermögen verlangsamt ist und ihr Stolpereien nicht mehr abfangen könnt. Ein Sprint erübrigt sich deshalb für diejenigen. Bei geübten Läufern ist gegen einen Sprint nichts einzuwenden. Übrigens: Für Nachtläufer gibt es in großen Sportbekleidungsläden praktische Fußlämpchen.





40. TAG: PAUSENTAG


Herzlich willkommen auf der Seite der Erfolgreichen! Es liegen zwei harte Trainingsphasen hinter dir, in denen du deinen Körper intensiv auf mehr Leistung vorbereitet hast. Deine Muskeln sind deutlich athletischer und auch dein Kalorienverbrauch ist angestiegen. Freue dich nun auf die letzte Phase. Nimm dir deshalb bitte ein bisschen Zeit, um darüber nachzudenken, wie du Phase drei für dich am effektivsten gestalten kannst. Jetzt heißt es noch einmal, alles und mehr zu geben. Stichwort: positiver Schmerz. Du hast es bis hierhin geschafft. Versprich mir, dass du für die letzten Tage dein Bestes gibst. Ohne zu fragen und zu denken. ICH WILL, DASS DU DEIN BESTES GIBST. Denke auch an deine Ernährung und daran, dir heute etwas Gutes zu tun.

OB DU GLAUBST, DU SCHAFFST ES, ODER OB DU GLAUBST, DU SCHAFFST ES NICHT, DU WIRST IN JEDEM FALL RECHT BEHALTEN.

Henry Ford





AUCH DU KANNST EIN HELD SEIN


Bereits in der Grundschule hatte ich eine ganz besondere Beziehung zum Sport – ich war der Schlechteste in der Klasse. Erst kurz vor dem Schulwechsel erreichte ich eine Note, mit der ich zufrieden war. Grund für das Zahlendesaster in meinem Zeugnis war eine völlig natürliche Tatsache: Ich hatte noch keinen wirklichen Bezug zu meinem Körper und insofern keine Ahnung, wie gut es sich anfühlen würde, der Schnellste zu sein, die meisten Tore zu schießen, eine Technik bis zur Perfektion zu verbessern oder wie im Rausch zu trainieren.

Eine Ahnung von dem, welche Glücksgefühle sportliche Erfolgserlebnisse freisetzen können und was sie für mich in Zukunft bedeuten würden, schob sich erst mit der Zeit in homöopathischen Dosen in mein Bewusstsein. Bis aus der Ahnung Gewissheit und damit mein Beruf wurde, dauerte es eine Weile.

Heute will ich nichts anderes mehr tun. Ich bin dankbar dafür, dass ich die Chance der freien Berufswahl hatte, denn ein Beruf sollte eine Berufung sein – schließlich verbringt man mit dieser Tätigkeit einen Großteil seines Lebens. Warum erzähle ich das? Mit der Berufswahl verhält es sich ähnlich wie mit fast allen anderen Situationen im Leben: Wenn du mit etwas unzufrieden bist, sieh genau hin – es gibt immer eine Alternative! Und zwar eine bessere! In gewisser Weise kannst du dazu sogar eine Parallele zu deinem Körper ziehen: Du hast zwei Drittel des Programms hinter dich gebracht und siehst jetzt deutlich, welche Erfolge du bisher erzielt hast. Vielleicht warst du in deinem Leben noch nie so fit und bist endlich mit dir und deinem Körper zufrieden. Doch das ist nur ein Teilerfolg. Wenn du so weit gekommen bist, warum heimlich und ehrenlos von der Tartanbahn verschwinden, anstatt noch eine letzte Runde zu drehen, dir die Medaille zu holen und dir selbst und allen anderen zu beweisen, dass du alles schaffen kannst, was du willst? Wenn du hier aufhörst, bist du nur zufrieden, wenn du weitermachst, bist du ein Held.





VERSUCHE IN PHASE DREI, DER FINALEN LEISTUNGSPHASE, DEINEN KOPF AUSZUSCHALTEN. DIE MUSIK UNTERSTÜTZT DICH DABEI: SIE ÜBERTÖNT UNTER ANDEREM DEIN LAUTES KEUCHEN UND VERHINDERT SO JEDEN ANFLUG VON SELBSTMITLEID, DAS ZUM ABBRUCH FÜHREN KÖNNTE. SIEH NICHT IN DER GEGEND UMHER, WENN DU TRAINIERST, KONZENTRIERE DICH AUF EINEN PUNKT IM RAUM. DU WIRST LEISTUNGSFÄHIGER SEIN, WEIL DU SCHMERZ, ANSTRENGUNG UND KRAFTVERLUST AUSBLENDEST.





41. TAG: DO YOUR BEST (circa 19 Minuten)


Jetzt heißt es „so schnell du kannst“. Die Muskulatur wird über einen Zeitraum von beispielsweise einer Minute natürlich an Tempo verlieren. Das macht aber nichts, denn wichtig ist nur, dass du wirklich an deinem persönlichen Maximum bist. Vielleicht hast du noch nie an deinem absoluten Limit trainiert und es kostet dich Überwindung, bis ans Äußerste zu gehen. Setze dir Kopfhörer auf, drehe die Musik so laut, wie du sie gerade noch ertragen kannst, schreie dir die Seele aus dem Leib, kämpfe, gib ALLES!

Warm-up: 3 Minuten Rope Skipping, normales Tempo

1,5 Minuten Squat: maximales Tempo, dann 1 Minute Pause

1,5 Minuten Deep Tap rechts: maximales Tempo, dann 30 Sekunden Pause

1 Minute Squat: maximales Tempo, dann 1 Minute Pause

1,5 Minuten Deep Tap links: maximales Tempo, dann 30 Sekunden Pause

1,5 Minuten L-Jump: maximales Tempo, dann 1 Minute Pause

1,5 Minuten Squat: maximales Tempo



Cool-down: 3 Minuten Rope Skipping, normales Tempo

Übrigens: Wer meint, er müsste die Hände beim Deep Tap auf das Knie stützen, tut sich damit keinen Gefallen. Deutlich effektiver ist es, wenn du mit den Händen ans Sprunggelenk fasst.





42. TAG: DO IT AGAIN II (circa 19 Minuten)


Jede der Übungen von gestern endete mit einem absoluten Muskel-K.-o. War das der Fall? Wenn du am Ende noch Reserven hattest, kannst du unmöglich im richtigen Modus gewesen sein – aber hier wird Training erst effektiv. Bei den Deep Taps kannst du zum Beispiel tiefer in die Hocke gehen, um die Übung zu intensivieren. Wenn du zwischendurch Pause machen musst, dann nur für zwei bis drei Sekunden. Wiederhole das Work-out noch einmal und erreiche den Modus der Superlative. Wie schon oft erwähnt, geht es beim Training, insbesondere in Phase drei, nicht darum, WAS du tust, sondern WIE du es tust. Das Workout von gestern wird heute wiederholt. Verbessere dich in jeder Übung. Hole alles aus deinen Muskeln heraus. Du wirst staunen, was noch in dir steckt. Konzentriere dich vorher eine Minute. Denke an dein Limit und dass du nicht aufgibst. Glaube an dich. Stell dir vor, die Übungen wollten dich erledigen. Coach Marco will dich erledigen. Aber du kämpfst bis zum Ende. Du lässt dich nicht unterkriegen!

Visualisierung ist übrigens ein gängiges Mittel von Leistungssportlern, um Ziele zu erreichen. Stelle dir, so oft es geht, das Ziel vor, das du erreichen willst. Was wirst du empfinden, wenn du in den Spiegel blickst?

Warm-up: 3 Minuten Rope Skipping, normales Tempo

1,5 Minuten Squat: maximales Tempo, dann 1 Minute Pause

1,5 Minuten Deep Tap rechts: maximales Tempo, dann 30 Sekunden Pause

1 Minute Squat: maximales Tempo, dann 1 Minute Pause

1,5 Minuten Deep Tap links: maximales Tempo, dann 30 Sekunden Pause

1,5 Minuten L-Jump: maximales Tempo, dann 1 Minute Pause

1,5 Minuten Squat: maximales Tempo



Cool-down: 3 Minuten Rope Skipping, normales Tempo





43. TAG: BE STRONG (circa 23 Minuten)


Heute ist Mentaltag. Erlaube dir keine destruktiven Gedanken. Alles, was du erlebst und fühlst – nimm es bewusst wahr und versuche, es positiv zu sehen, zu ändern oder zu ignorieren. Wir alle werden als Optimisten geboren. Erst unsere Erziehung und unser Umfeld haben uns das Zweifeln an uns selbst gelehrt. Aber es besteht überhaupt kein Grund, an dir zu zweifeln: Du bist stark – vor allem dein Wille – und du kannst erreichen, was du willst.

Warm-up: Dynamic Handplank (Übungen in Sek./Pause in Sek.)

30/15 ➜ 30/15 ➜ 30/15 ➜ 30/15 ➜ 30/15

1 Minute Jumped Knee Lift rechts

1 Minute Dynamic Handplank

1 Minute Jumped Knee Lift links

1 Minute Jumped Squat

100 x Upper Crunch

Rope Skipping/Jumping Jab rechts/Rope Skipping/Jumping Jab links. (Übungen in Minuten)

3 ➜ 3 ➜ 3 ➜ 3





44. TAG: AS YOU LIKE IT (circa 30 Minuten)


Du hast ein hartes Training absolviert. Möglicherweise hast du dich zwischendurch gefragt, warum du dir das antust, und überlegt aufzuhören. Sei dir bewusst, dass du an das Level, das du bisher geschafft hast, nicht so schnell wieder herankommst. Du bist auf dem besten Weg, den sportlichsten Zustand deines Lebens zu erreichen. Willst du wirklich so kurz vor dem Ziel aufgeben? Nur wegen der 30 Minuten, in denen du am Tag dafür schwitzen musst? Tu es nicht! Mach weiter, arbeite an deinem Trainingserfolg.

Gestalte heute wieder dein eigenes Training, und zwar ein 30-Minuten-Ausdauerworkout. Ob draußen laufen, schwimmen oder boxen – suche dir etwas aus, das dir Spaß macht, intensiv ist, und sei dabei gut gelaunt.



SCHENKE DIR ENTSPANNUNG

Die Trainingseinheiten werden immer intensiver. Bevor du nach einer Session zurück in den Alltag kommst, kannst du, um den Übergang etwas geschmeidiger zu gestalten, eine einfache Entspannungsübung machen. Somit hast du noch eine zusätzliche Einheit Mentaltraining absolviert und bist frisch für den Tag: Schließe die Augen, stelle dir den Tag vor und was du von ihm erwartest. Visualisiere die Situationen mit Wohlwollen. Entspanne dich, bis dein Atem zur Ruhe gekommen ist. Danke dir selbst für das, was du bisher im Leben und im Training erreicht hast. Und los geht’s! Ich wünsche dir einen schönen Tag!





45. TAG: PAUSENTAG


Der gestrige Tag war wichtig für deine Selbstständigkeit. Das Zusammenstellen eigener Workouts ist eine Voraussetzung für das Weitermachen nach dem Buch. Ruhe dich einen Tag aus. Entspanne die Muskeln, fülle deine Nährstofftanks mit den besten Nahrungsmitteln auf und lasse es dir in deiner freien Zeit gut gehen. Vielleicht nimmst du dir den Schmöker vor, den du schon seit Langem lesen wolltest, planst deine nächste Reise oder suchst dir ein Event aus, an dem du gern teilnehmen möchtest. Beschäftige dich mit schönen Dingen – das macht glücklich und beruhigt. Du wirst die Entspannung brauchen. Morgen geht’s mit Power weiter.

Übrigens ist Sport nur die wildere Form der Entspannung. Neurobiologisch betrachtet, passiert bei einer Meditation das Gleiche wie beim Fitnesstraining: Zunächst werden stimulierende, später beruhigende Hormone ausgeschüttet. Zudem machen Entspannung und Sport schlau. Wissenschaftler haben herausgefunden, dass im selben Areal des Gehirns Wachstum registriert wurde.



STÄRKE DEINEN WILLEN

Wenn du deine Konzentration und damit deinen Willen noch zusätzlich stärken willst, befestige in deinem Schlafzimmer irgendwo einen Punkt, den du ansiehst, kurz bevor du einschläfst. Fokussiere den Punkt ein paar Minuten lang, bis du eine deutliche Entspannung spürst – sowohl körperlich als auch gedanklich. Wenn du bei dieser Übung dabei noch etwas lächelst, hast du gleich noch ein kleines Optimismus-Workout absolviert. Studien haben ergeben, dass ein Lächeln – egal ob echt oder künstlich – Glückshormone produziert.





46. TAG: RUN AND PUMP (circa 38 Minuten)


Mittlerweile hast du deinen inneren Schweinehund bestimmt ganz gut im Griff. Wie sieht es mit Heißhungerattacken aus? Hungern soll hier zwar niemand, aber wir fahren die Kohlenhydrataufnahme stark herunter, was abends oft zu großer Lust auf Snacks führt. So eine Attacke kann man entweder aussitzen (dauert etwa 15 Minuten) oder einen Eiweißshake trinken oder: Fruchtkaugummi ohne Zucker kauen. Angeblich trickst man mit den Kaubewegungen die Hormone aus und stellt so das Hungergefühl ein.

Outdoor: 25 Minuten laufen

Warm-up: 5 Minuten laufen, normales Tempo

20 Minuten laufen, so schnell, dass du gerade noch reden könntest. Wenn du nicht laufen kannst oder darfst, kannst du auch walken.

Dynamic Handplank (Übung in Sek./Pause in Sek.)

45/15 ➜ 45/15 ➜ 45/0

Dynamic Elbow Anchor rechts (Übung in Sek./Pause in Sek.)

60/15 ➜ 45/15 ➜ 45/15

Dynamic Elbow Anchor links (Übung in Sek./Pause in Sek.)

60/15 ➜ 45/15 ➜ 45/15

Upper Crunch (Übung in Sek./Pause in Sek.)

60/15 ➜ 60/15 ➜ 60/0





DYNAMIC ELBOW ANCHOR FÜR FORTGESCHRITTENE

Deine Muskulatur sollte jetzt bereit sein, beim Dynamic Elbow Anchor einen Schritt weiterzugehen: Versuche, das obere Bein während der Übung anzuheben, aber nur so weit, dass es gerade keinen Kontakt mehr zu dem unteren Bein hat. Die Haltung ähnelt einem Stern – be a star!





47. TAG: JUMP AND FLY (circa 18 Minuten)


Du machst das großartig. Du hast so lange so gut durchgehalten. Noch zwei Wochen Vollgas, und du bist am Ziel. Es lohnt sich. Der Körper ist nun gut vorbereitet. Bleib am Ball und habe Spaß dabei.

Warm-up: 5 Minuten Rope Skipping in normalem Tempo

1,5 Minuten Push-up und Anchor rechts und links im direkten Wechsel

20 x Jumped Squat

1 Minute Jumping Jab rechts: maximales Tempo

1 Minute Jumping Jab links: maximales Tempo

1,5 Minuten Push-up und Anchor rechts und links im Wechsel

20 x Jumped Squat

3 Minuten Rope Skipping in normalem Tempo





SALZ REDUZIEREN

Wie kannst du die Effizienz des Ernährungsplans noch steigern? Indem du wenig Industriesalz verwendest. Zu viel Salz macht nämlich müde, weil es das Wachmachermineral Kalium ausschwemmt und die Nieren, unser heimliches Energiezentrum, schwächt.





48. TAG: PUSH AND JUMP (circa 25 Minuten)


Weiter so! Wer täglich trainiert, sollte übrigens mindestens zwei paar Trainingsschuhe zum Wechseln haben, denn Schuhe brauchen etwa 24 Stunden, um ganz auszutrocknen.

Warm-up: 5 Minuten Rope Skipping in schnellem Tempo

2 x Deep Knee rechts, 1 x Jumped Knee Lift rechts: Das Standbein ist dein Sprungbein, mit dem du dich vom Boden abdrückst, sodass das linke Bein nach oben zieht. Wiederhole die Übungseinheit insgesamt 10-mal.

2 x Deep Knee links, 1 x Jumped Knee Lift links: Das Standbein ist dein Sprungbein, mit dem du dich vom Boden abdrückst, sodass das rechte Bein nach oben zieht. Wiederhole die Übungseinheit insgesamt 10-mal.

10 x Dynamic Handplank, 1 x Push-up: Wiederhole die Übungseinheit insgesamt 10-mal.

Box Skipping: 20 Schritte, dann 1 x Squat, wiederhole die Übungseinheit insgesamt 50-mal. Wiederhole die Übungen 1 bis 4 noch einmal.

3 Minuten Upper Crunch ohne Pause





49. TAG: PAUSENTAG


Nutze den Pausentag, um dir etwas Gutes zu tun. Wahrscheinlich hast du mittlerweile herausgefunden, wie du dir diese Trainingspause am liebsten gestaltest. Vielleicht hast du sogar Zeit, in den Wald zu fahren oder einen Spaziergang im Park zu machen. In der Farbtherapie heißt es nämlich, dass der menschliche Körper bei Wahrnehmung der Farbe Grün zwangsläufig entspannt. Und frische Luft tut immer gut.

Eine andere Sache, die laut fernöstlicher Heillehre ebenso entspannt wie Meditation oder Sport, ist Aufräumen. Wer außen aufräumt, räumt auch innen auf, heißt es: Müssen die Schubladen deines Schreibtischs dringend aussortiert werden? Dein Kleiderschrank gleicht eher einem Museum? Weg mit den alten Klamotten. Wer Altes aussortiert, schafft Platz für Neues – auch im Geiste. Ein Friseurbesuch könnte für frischen Wind sorgen und das Kunstmuseum oder der Bummel durch die Innenstadt Inspiration verschaffen. Probiere es aus. Fülle dein Leben mit Unternehmungen, die dir guttun. Oder gönne dir zwischendurch einfach mal eine wohltuende Massage für deine Füße. Egal ob nach einem Workout oder am Pausentag – auch deine Füße brauchen Entspannung.





ENTSPANNUNG FÜR DEINE FÜßE

Du brauchst ein Handtuch zum Unterlegen, etwas Massageöl und gewaschene Füße. Umfasse mit beiden Händen zuerst den rechten Fuß. Streiche mit den Daumen den Spann zu den Zehen hin aus. Dann streiche mit etwas Druck an der Fußaußenkante entlang bis zu den Zehen. Umrunde jetzt die Ferse mit dem Daumen, lasse den Kreis dabei immer kleiner werden. Massiere die Fußsohle mit den Daumen zu den Zehen hin in kreisenden Bewegungen. Durchfahre mit dem Zeigefinger die Zehenzwischenräume. Ziehe zum Schluss jeden einzelnen Zeh, beginnend mit dem großen Zeh, leicht mit Daumen und Zeigefinger lang und drehe ihn dabei leicht hin und her. Kreise das Fußgelenk, schüttle Fuß und Wade aus. Massiere jetzt den anderen Fuß.





50. TAG: 100-PERCENT TRAINING (circa 25 Minuten)


Noch zehn Tage. Du bist fast am Ziel. Optimiere immer wieder deine Ernährung. Sie macht meiner Meinung nach etwa 70 Prozent des Trainingserfolgs aus. Denn was nützen zum Beispiel die schönsten Bauchmuskeln, wenn sie unter Speckröllchen versteckt sind? Wenn du die Regeln zu 100 Prozent einhältst, werden deine Mühen viel schneller sichtbar.

Warm-up: 2 Minuten Jumping Jack

1 Minute L-Jump

1 Minute Jumping Jab rechts. Wiederhole die Übungen 1 und 2 noch einmal mit Jumping Jab auf links.

Trizeps Dip (Übung in Sek./Pause in Sek.)

60/15 ➜ 30/15 ➜ 20/10 ➜ 20/0

Upper Crunch/Lower Crunch im Wechsel (Übungen in Min.)

1/1 ➜ 1/1 ➜ 1/1

Butterfly Reverse in Bauchlage (Übung in Sek./Pause in Sek.)

60/15 ➜ 60/15 ➜ 60/15

Box Skipping/Sprint im Wechsel (Übungen in Sek.)

20/20 ➜ 20/20 ➜ 20/30 ➜ 10/10 ➜ 10/30



Cool-down: 3 bis 5 Minuten lockeres Gehen am Platz





51. TAG: RESPONSIBILITY WORKOUT (circa 17 Minuten)


Du bist auf der Zielgeraden. Die letzten Tage dieses Trainingsprogramms sind angebrochen. Falls du dich zwischendurch fragst, warum du das tust, helfe ich dir bei der Sinnsuche gern weiter: Sport ist nicht nur eine der schönsten Nebensachen der Welt, Sport ist unsere gesellschaftliche Pflicht. Jeder Mensch hat einen Beitrag für die Gesellschaft zu leisten, und der ist unter anderem, sich – so gut wie jeder kann – um sich selbst und seine Gesundheit zu kümmern. Wer faul und träge herumsitzt, gefährdet damit nicht nur seine Gesundheit, sondern strapaziert damit langfristig, nämlich wenn er krank wird, unnötig unser soziales Netz. Du trainierst also nicht nur für dich, sondern auch für alle anderen.

Warm-up: 3 Minuten Rope Skipping

2 x Deep Knee rechts, 1 x Jumped Knee Lift rechts: insgesamt 15 Wiederholungen

Dynamic Handplank: Die Knie müssen nicht die Ellenbogen berühren. Absolviere insgesamt 50 laufende Schritte im Wechsel.

50 x Snow Angel in Bauchlage

2 x Deep Knee links, 1 x Jumped Knee Lift links: insgesamt 15 Wiederholungen

20 x Block and Punch

35 x Deep Tap rechts, 35 x Deep Tap links: ohne Pause. Wiederhole die Übungen 1 bis 4 noch einmal.

3 Minuten Block: Halte die Position auf den Unterarmen, lege notfalls die Knie ab.





52. TAG: RUN AND PUSH (circa 60 Minuten)


2012 habe ich mir den Fuß gebrochen. Das schmerzvollste Erlebnis war nicht der Bruch selbst. Der tat nicht mehr weh als eine Prellung. Nein, es war das Erlebnis, wie man sich als übergewichtiger, unfitter Mensch im Alltag fühlt. Ich wünschte, alle Menschen, die unzufrieden mit ihrem Körper sind, wüssten, wie es sich anfühlt, fit zu sein. Ich bin mir sicher, keiner würde mehr zögern, dieses Buch zu lesen. Ich bin sehr dankbar, dass ich normalerweise sehr fit bin, und hoffe täglich, noch mehr Menschen auf meine Seite holen zu können.

Outdoor: Laufe so lange, wie es geht. Gehe schnell, wenn du nicht mehr laufen kannst. Wenn du normalerweise eine Stunde problemlos durchlaufen könntest, laufe jetzt so schnell, wie du kannst. Am Ende der Einheit führe folgendes Übungsintervall durch:

15 x Push-up, 10 Sekunden Pause, 14 x Push-up, 10 Sekunden Pause, 13 x Push-up, 10 Sekunden Pause … Am Ende führst du nur noch einen Push-up aus.

WER IMMER TUT, WAS ER SCHON KANN, BLEIBT IMMER DAS, WAS ER SCHON IST.

Henry Ford



Übrigens: Absolviere den Push-up auf Knien bitte nur noch, wenn er so vorgegeben ist. Ansonsten gilt der Push-up mit gestreckten Beinen. Gehe an dein Limit. Wenn die Arme sich keinen Zentimeter mehr bewegen, halte die Position und zähle im Sekundentakt, bis die Übung beendet wäre.



TRINKST DU GENUG?

Zwei bis drei Liter am Tag sollten es sein, wenn du intensiv Sport treibst! Am besten ist Wasser. Wenn dir geschmackloses Wasser zu langweilig ist, kannst du mit Minzeblättern, Limetten- oder Orangenscheiben ganz einfach deine eigene Limo herstellen: Gib ein paar Fruchtscheiben oder Minzeblätter in eine Karaffe und fülle mit Mineralwasser oder stillem Wasser auf. Damit Kräuter ihr Aroma verbreiten, zerreiße oder zerstoße die Blätter vorher.





53. TAG: GO AND GET IT! (circa 30 Minuten)


Bald bist du am Ziel – und gleichzeitig am Start in ein Leben, das du zukünftig selbstständig so gestalten kannst, dass du fit bleibst. Ich möchte dich noch einmal daran erinnern, jede Übung perfekt auszuführen, auf deine Atmung und einen konzentrierten Blick zu achten. Gib alles in den letzten Tagen des Programms.

Rope Skipping/Deep Tap rechts (Übungen in Sek.)

120/60 ➜ 60/45 ➜ 60/45

Dynamic Handplank/Jumped Squat (Übungen in Sek.)

60/60 ➜ 60/60 ➜ 60/60

Rope Skipping/Deep Tap links (Übungen in Sek.)

120/60 ➜ 60/45 ➜ 60/45

Dynamic Elbow Anchor rechts/Lower Crunch (Übungen in Sek.)

60/60 ➜ 60/45 ➜ 60/45

Dynamic Elbow Anchor links/Upper Crunch (Übungen in Sek.)

60/60 ➜ 60/45 ➜ 60/45





54. TAG: PAUSENTAG


Denke in den letzten Tagen noch einmal daran, nur dann zu essen, wenn du wirklich Hunger hast. Vor allem abends essen wir oft aus Langeweile. Eine Empfehlung, die ich meinen Kunden immer mitgebe: Überlege dir, wenn du Appetit auf etwas Süßes bekommst oder merkst, dass du aus reiner Langeweile etwas essen möchtest, zwei Dinge:

Essen aus reiner Langeweile hat nicht einen einzigen Vorteil. Ein Schokoriegel kann schließlich keine Witze erzählen. Er macht einfach nur dick.

Nutze die Zeit, in der du rumsitzen und naschen würdest, lieber, um Dinge zu tun, die du schon lange erledigen wolltest: Schrank aufräumen, Tagebuch schreiben, bügeln, mal wieder malen. Du fühlst dich hinterher mit Sicherheit besser, als wenn du etwas gegessen hättest. Aber: Wenn du wirklich Hunger hast – iss!





VORSICHT BEI LIGHT-PRODUKTEN

Wenn du deine Ernährung nun langfristig umstellst, sei bitte wachsam, was Light-Produkte anbelangt. Sie enthalten zwar weniger Fett, damit sie aber trotzdem schmecken, sind sie oft gesüßt und enthalten teilweise noch eine Vielzahl an Geschmacksverstärkern. Achte deshalb genau auf die Inhaltsstoffe.





55. TAG: BODYFIGHT WORKOUT (circa 25 Minuten)


Wie geht es deinen Füßen? Ich weiß, in meinen Workouts kommen Rope Skippings, Jumping Jabs oder Sprints häufig vor – das fordert deine Füße enorm. Aber mit guten Trainingsschuhen sollte das kein Problem sein. Gönne dir trotzdem zwischendurch eine Fußmassage. Am besten geeignet sind hierfür die Abendstunden nach dem Training oder vor dem Zubettgehen.

Warm-up: 2 Minuten Rope Skipping in mittlerem Tempo

1 Minute Dynamic Elbow Anchor rechts

Sprint/Box Skipping (Übungen in Sek.)

15/15 ➜ 15/15 ➜ 15/15 ➜ 15/15

1,5 Minuten Dynamic T-Stance rechts

Sprint/Box Skipping (Übungen in Sek.)

10/5 ➜ 10/5 ➜ 10/5 ➜ 10/5

1 Minute Dynamic Elbow Anchor links

Sprint/Box Skipping (Übungen in Sek.)

30/15 ➜ 30/15 ➜ 30/15

Push-up auf Knien: 1 Minute Push-up so schnell du kannst, 15 Sekunden Pause und weiter, bis keiner mehr geht, dann 15 Sekunden Pause und ein letztes Mal bis zum bitteren Ende

Sprint/Box Skipping (Übungen in Sek.)

5/5 ➜ 5/5 ➜ 5/5 ➜ 5/5 ➜ 5/5 ➜ 5/5

1,5 Minuten Dynamic T-Stance links

Push-up auf Knien: 45 Sekunden Push-up, 15 Sekunden Pause und weiter, bis keiner mehr geht, dann 15 Sekunden Pause und ein letztes Mal bis zum bitteren Ende





56. TAG: CLOSE TO FINAL SESSION (circa 25 Minuten)


Du bist auf der Zielgeraden. Jetzt, auf den letzten 100 Metern, muss ich dich nicht mehr motivieren. Dein innerer Schweinehund ist zum Meerschweinchen geschrumpft und alles, was du brauchst, ist ein wenig Abwechslung. Gönne dir doch mal neue Sportklamotten oder ein paar schöne Laufschuhe. Vielleicht hat ein neues Fitnesscenter in deiner Nähe eröffnet, bei dem du Mitglied werden möchtest, oder du rekrutierst im Freundeskreis Mädels und Jungs, die mit dir eine kleine Sportgemeinschaft bilden wollen. Gestalte deine Tage immer wieder aufregend neu und voller Freude.

Warm-up: 3 Minuten Diagonal Knee Crunch, pro Seite 1,5 Minuten

Push-up/Box Skipping: 1 x Push-up, 10 schnelle gerade Punches (Anzahl der Wiederholungen)

2/20 ➜ 3/30 ➜ 4/40 ➜ 5/50 ➜ 6/60 ➜ 7/70 ➜ 8/80 ➜ 9/90 ➜ 10/100

Jumped Squat/Jumping Jack: 1 x Sprung, 10 x Jumping Jack (Anzahl der Wiederholungen)

2/20 ➜ 3/30 ➜ 4/40 ➜ 5/50 ➜ 6/60 ➜ 7/70 ➜ 8/80 ➜ 9/90 ➜ 10/100

1 Minute Dynamic Handplank

Jumped Knee Lift rechts/Lunge rechts/Jumped Knee Lift links/Lunge links (Anzahl der Wiederholungen)

15 ➜ 20 ➜ 15 ➜ 20





57. TAG: FLY LIKE AN EAGLE WORKOUT (circa 47 Minuten)


Kennst du die Geschichte von dem kleinen Vogel, der aus dem Nest gefallen ist und von Hühnern großgezogen wird? Eines Abends sitzen Mama und Papa Huhn mit dem kleinen Vogel zusammen und gucken in die Luft. Da kreist ein Adler über dem Bauernhof. Bewundernd sieht der kleine Vogel zu: „Wäre das nicht wundervoll, so fliegen zu können?“ So geht es vielen von uns. Wir wissen gar nicht, was wir alles können, weil wir es noch nie im Leben ausprobiert haben.

1 Minute Jumping Jab rechts

1 Minute Anchor rechts

1 Minute Deep Knee rechts



Wiederhole die Übungen 1 bis 3 insgesamt 3-mal auf rechts und 3-mal auf links ohne Pause, dann 1 Minute Pause.





1 Minute Deep Tap rechts

1 Minute Dynamic Handplank

1 Minute Upper Crunch: Strecke wie beim Lower Crunch die Beine nach oben, aber hebe den Oberkörper, nicht den Po an.



Wiederhole die Übungen 4 bis 6 insgesamt 3-mal mit Deep Tap auf rechts und 3-mal mit Deep Tap auf links ohne Pause, dann 1 Minute Pause.





1 Minute Butterfly Reverse

1 Minute Jumped Squat

1 Minute Push-up



Wiederhole die Übungen 7 bis 9 insgesamt 3-mal ohne Pause.





58. TAG: HAPPINESS TRAINING (circa 30 Minuten)


Bald bist du ein Winner, ein Sieger. Natürlich machst du jetzt nicht mehr schlapp, sondern ziehst das Programm durch. Du schaffst das wahrscheinlich mittlerweile ganz nebenbei. Denke einmal darüber nach, was du bis hierher geleistet hast. Blättere in diesem Buch noch einmal zurück – das Tagebuch deines Erfolgs – und nutze die Freude darüber als Energie für das heutige Training.

Stelle dir eine Trainingseinheit zusammen, die etwa 25 bis 30 Minuten dauert. Da die letzten Tage sehr viele Kraftübungen beinhaltet haben, wäre heute wieder ein Lauftraining ideal. Du kannst dieses Training allerdings mit dynamischen Ausdauereinheiten kombinieren. Zum Beispiel: 10 Minuten laufen, 2,5 Minuten Box Skipping, 10 Minuten laufen, 2,5 Minuten Jumping Jack, 3 Minuten lockeres Auslaufen. Selbstverständlich steht es dir frei, entweder eine reine Laufeinheit zu absolvieren oder diese mit anderen Box- oder Ausdauerelementen zu kombinieren.



MEHR EFFEKT

Wenn du den Effekt des Jumping Jacks für Bauch, Beine und Po intensivieren möchtest, versuche, breiter und tiefer zu springen. Die Bauchmuskeln werden zur Stabilisation eingesetzt, die Beinmuskeln zum Abfedern und Halten. Das Gleiche gilt für Sprints, Jumping Jabs oder Box Skippings: Für einen Zusatzeffekt spanne gezielt deine Bauchmuskeln an.





59. TAG: ENJOY THE NEW SPIRIT (circa 25 Minuten)


„Vorfreude ist die schönste Freude“, heißt es so oft. Wie ich darauf komme? Weil morgen der letzte Tag ist? Falsch! Weil es nach dem morgigen Tag erst losgeht! Dein Leben als dein eigener Personal Trainer. Du hast alles, was du brauchst, um das Niveau, das du morgen erreicht hast, für immer zu halten oder zu verbessern. Freue dich darauf. Auf deine Unabhängigkeit, auf dein neues Leben als fitter Mensch mit mehr Motivation, mehr Lebensfreude und mehr Ausstrahlung.

4 x Jumping Jab rechts, 4 x Jumping Jab links

8 x Jumping Jack



Wiederhole die Übungen 1 und 2 insgesamt 10-mal ohne Pause.





4 x L-Jump

20 x Upper Crunch

10 x Snow Angel in Bauchlage



Wiederhole die Übungen 3 bis 5 insgesamt 5-mal ohne Pause.





30 x Dynamic Handplank

5 x Jumped Knee Lift rechts, 5 x Jumped Knee Lift links



Wiederhole die Übungen 6 und 7 insgesamt 3-mal ohne Pause.





60. TAG: HAPPY END WORKOUT (circa 56 Minuten)


So, liebe Leserin, lieber Leser, es ist so weit. Du bist so weit. Du hast es geschafft, 60 Tage lang konsequent an dir zu arbeiten. Trotz innerem Schweinehund und schlechten Wetters, trotz Bedenkenträger im Umfeld, trotz Muskelkater, übler Laune und Stress im Job. Herzlichen Glückwunsch! Du hast den Bogen raus und weißt jetzt, was du tun musst, um so auszusehen, wie du jetzt aussiehst, denn dein Traumkörper klingelt nicht plötzlich an der Tür. Also: Feiere dein Abschlusstraining mit mir und gib noch einmal ALLES.

Teil 1

3 Minuten Rope Skipping

1 Minute Push-up auf Knien: schnelles Tempo, dann 1 Minute Pause



Wiederhole die Übungen 1 und 2 mit Pause insgesamt 3-mal.





Teil 2

1,5 Minuten Squat

50 x Dynamic Handplank: 25 x rechts, 25 x links

Rope Skipping/Sprint im Wechsel (Übungen in Sek.)

20/20 ➜ 20/20 ➜ 20/20





Teil 3

Indoor oder outdoor: 35 Minuten laufen

5 Minuten normales Tempo ➜ 30 Sekunden schnelles Tempo ➜ 2,5 Minuten normales Tempo (insgesamt 4-mal wiederholen)

Cool-down: 3 Minuten lockeres Auslaufen

Und jetzt die letzte Aufgabe: ein Schlussfoto mit Siegerlächeln!
